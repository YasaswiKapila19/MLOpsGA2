name: CI Pipeline

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for DVC

      # 2. Setup Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc[cml] pytest dvc-gs

   
      # 4. DVC
      - name: Set up GCP credentials and authenticate
        env:
          GCP_B64: ${{ secrets.GCP_SA_KEY }}
        run: |
          set -e
          echo "$GCP_B64" | base64 -d > gcp-key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-key.json" >> $GITHUB_ENV
          export GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-key.json
          
          echo "✓ Decoded service account key"
          python3 -m json.tool gcp-key.json > /dev/null && echo "✓ Valid JSON"
          
          echo "Installing Google Cloud CLI..."
          sudo apt-get update && sudo apt-get install -y google-cloud-cli
          
          echo "Authenticating with GCP..."
          gcloud auth activate-service-account --key-file=gcp-key.json
          gcloud config set project mlops-466312
          
          echo "Running DVC pull in same session..."
          source .venv/bin/activate
          
          export GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-key.json
          
          echo "Configuring DVC to use gcloud credentials..."
          dvc remote modify gcsremote credentialpath $(pwd)/gcp-key.json
          
          echo "Running DVC pull:"
          dvc pull -v
          
      # 5. Run pytest
      - name: Run tests and create report
        run: |
          mkdir -p reports
          echo "## Pytest Sanity Report" > reports/report.md
          echo "" >> reports/report.md
          pytest -v tests/ --maxfail=1 --disable-warnings --tb=short >> reports/report.md
      
      # 6. Set up CML
      - name: Set up CML
        uses: iterative/setup-cml@v2
        with:
          version: 'latest'
      
      # 7. Post report as comment
      - name: Post CML comment
        run: |
          cml comment create --publish reports/report.md
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
